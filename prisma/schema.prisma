// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Users collection
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  createdRecipes     Recipe[]       @relation("RecipeCreator")
  favouriteRecipes   Recipe[]       @relation("UserFavourites", fields: [favouriteRecipeIds], references: [id])
  favouriteRecipeIds String[]       @db.ObjectId
  recipeMenus        RecipeMenu[]
  shoppingLists      ShoppingList[]
}

// Item Categories with default allowed units
model ItemCategory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  faIcon         String   @unique
  defaultUnitIds String[] @db.ObjectId // Default units for this category
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  items Item[]
}

// Items with optional unit overrides
model Item {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  categoryId     String   @db.ObjectId
  allowedUnitIds String[] @db.ObjectId // Override units (empty = use category defaults)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  category ItemCategory @relation(fields: [categoryId], references: [id])
}

// Recipes collection
model Recipe {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  timeInMinutes Int
  image         RecipeImage?
  instructions  String[]
  notes         String[]
  approved      Boolean      @default(false)
  serves        Int
  createdById   String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Embedded ingredients
  ingredients RecipeIngredient[]

  // Relations
  createdBy       User?            @relation("RecipeCreator", fields: [createdById], references: [id])
  categories      RecipeCategory[] @relation(fields: [categoryIds], references: [id])
  categoryIds     String[]         @db.ObjectId
  favouritedBy    User[]           @relation("UserFavourites", fields: [favouritedByIds], references: [id])
  favouritedByIds String[]         @db.ObjectId
}

// Recipe Categories collection
model RecipeCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes   Recipe[] @relation(fields: [recipeIds], references: [id])
  recipeIds String[] @db.ObjectId
}

// Recipe Menu collection (meal plan)
model RecipeMenu {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Embedded entries
  entries RecipeMenuEntry[]

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Shopping List collection
model ShoppingList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Embedded items
  items ShoppingListItem[]

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Unit collection
model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  abbreviation String   @unique
  category     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  // No direct relations - units are referenced by ID in embedded types
}

// Embedded types (only for simple data)
type RecipeImage {
  url      String?
  filename String?
}

type RecipeIngredient {
  itemId   String  @db.ObjectId
  unitId   String? @db.ObjectId
  quantity Float
}

type RecipeMenuEntry {
  recipeId String @db.ObjectId
  serves   Int
}

type ShoppingListItem {
  itemId   String  @db.ObjectId
  unitId   String? @db.ObjectId
  quantity Float
  obtained Boolean @default(false)
}

// Auth.js models:
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
